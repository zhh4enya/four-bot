from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.database import save_user_profile, get_user_profile, delete_user_profile
from utils.templates import load_template
from datetime import datetime

def register_profile_handlers(dp, osu_api):
    
    @dp.message(F.text.startswith("–ø—Ä–∏–≤—è–∑–∞—Ç—å "))
    async def link_profile(message: Message):
        try:
            username = message.text[10:].strip()
            
            if not username:
                await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –ø—Ä–∏–≤—è–∑–∞—Ç—å cookiezi")
                return
            
            user_data = await osu_api.get_user(username)
            
            if not user_data:
                await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∏–∫–Ω–µ–π–º–∞.")
                return
            
            save_user_profile(message.from_user.id, user_data['username'], user_data['id'])
            
            await message.reply(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\nüë§ osu! –ø—Ä–æ—Ñ–∏–ª—å: {user_data['username']}")
            
        except Exception as e:
            print(f"[!] error during binding profile")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    
    @dp.message(F.text.in_(["–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∞–π–ª", "–ø—Ä–æ—Ñ", "—Å—Ç–∞—Ç–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
    async def show_profile(message: Message):
        try:
            user_profile = get_user_profile(message.from_user.id)
            
            if not user_profile:
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ø—Ä–∏–≤—è–∑–∞—Ç—å <–Ω–∏–∫–Ω–µ–π–º>")
                return
            
            username = user_profile[0]
            
            user_data = await osu_api.get_user(username)
            
            if not user_data:
                await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            stats = user_data['statistics']
            
            play_time_hours = stats['play_time'] // 3600
            play_time_minutes = (stats['play_time'] % 3600) // 60
            
            rank_text = f"Rank: ü•àSS: {stats['grade_counts']['ssh']} | ü•áSS: {stats['grade_counts']['ss']} | ü™ô SH: {stats['grade_counts']['sh']} | üèÜ S: {stats['grade_counts']['s']} | üß± A: {stats['grade_counts']['a']}"
            
            profile_text = load_template('profile_template.txt', {
                'username': user_data['username'],
                'pp': f"{stats['pp']:,.0f}",
                'country_rank': f"{stats['country_rank']:,}",
                'global_rank': f"{stats['global_rank']:,}",
                'accuracy': f"{stats['hit_accuracy']:.2f}",
                'play_count': f"{stats['play_count']:,}",
                'play_time_hours': play_time_hours,
                'play_time_minutes': play_time_minutes,
                'rank_text': rank_text
            })
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéµ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π", callback_data=f"recent_{user_data['id']}")]
            ])
            
            await message.reply(profile_text, reply_markup=keyboard)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await message.reply("[!] error 47")
    
    @dp.callback_query(F.data.startswith("recent_"))
    async def show_recent_play(callback: CallbackQuery):
        try:
            user_id = callback.data.split("_")[1]
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
            recent_plays = None
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: get_user_recent
            if hasattr(osu_api, 'get_user_recent'):
                recent_plays = await osu_api.get_user_recent(user_id, limit=1)
            # –í–∞—Ä–∏–∞–Ω—Ç 2: get_recent_scores  
            elif hasattr(osu_api, 'get_recent_scores'):
                recent_plays = await osu_api.get_recent_scores(user_id, limit=1)
            # –í–∞—Ä–∏–∞–Ω—Ç 3: get_user_scores_recent
            elif hasattr(osu_api, 'get_user_scores_recent'):
                recent_plays = await osu_api.get_user_scores_recent(user_id, limit=1)
            # –í–∞—Ä–∏–∞–Ω—Ç 4: user_recent
            elif hasattr(osu_api, 'user_recent'):
                recent_plays = await osu_api.user_recent(user_id, limit=1)
            else:
                await callback.answer("‚ùå –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            if not recent_plays or len(recent_plays) == 0:
                await callback.answer("‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            play = recent_plays[0]
            beatmap = play.get('beatmap', {})
            beatmapset = play.get('beatmapset', {})
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            created_at = datetime.fromisoformat(play['created_at'].replace('Z', '+00:00'))
            time_ago = format_time_ago(created_at)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥ —Å—Ç—Ä–æ–∫—É
            mods = play.get('mods', [])
            mods_str = "+".join(mods) if mods else "No mods"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º grade —ç–º–æ–¥–∑–∏
            grade_emojis = {
                'XH': 'ü•à',
                'X': 'ü•á', 
                'SH': 'ü™ô',
                'S': 'üèÜ',
                'A': 'ü•â',
                'B': 'üü¢',
                'C': 'üü°',
                'D': 'üî¥',
                'F': 'üíÄ'
            }
            grade_emoji = grade_emojis.get(play.get('rank', 'F'), '‚ùì')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            statistics = play.get('statistics', {})
            total_hits = (statistics.get('count_300', 0) + 
                         statistics.get('count_100', 0) + 
                         statistics.get('count_50', 0) + 
                         statistics.get('count_miss', 0))
            
            if total_hits > 0:
                accuracy = ((statistics.get('count_300', 0) * 300 + 
                           statistics.get('count_100', 0) * 100 + 
                           statistics.get('count_50', 0) * 50) / (total_hits * 300)) * 100
            else:
                accuracy = 0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è recent play
            recent_text = load_template('recent_template.txt', {
                'title': beatmapset.get('title', 'Unknown'),
                'version': beatmap.get('version', 'Unknown'),
                'creator': beatmapset.get('creator', 'Unknown'),
                'grade_emoji': grade_emoji,
                'rank': play.get('rank', 'F'),
                'difficulty_rating': f"{beatmap.get('difficulty_rating', 0):.2f}",
                'accuracy': f"{accuracy:.2f}",
                'max_combo': f"{play.get('max_combo', 0)}",
                'pp': f"{play.get('pp', 0):.0f}",
                'count_300': statistics.get('count_300', 0),
                'count_100': statistics.get('count_100', 0),
                'count_50': statistics.get('count_50', 0),
                'count_miss': statistics.get('count_miss', 0),
                'mods': mods_str,
                'time_ago': time_ago
            })
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
            ])
            
            await callback.message.edit_text(recent_text, reply_markup=keyboard, parse_mode='Markdown')
            await callback.answer()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–µ—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–µ—è", show_alert=True)
    
    @dp.callback_query(F.data == "back_to_profile")
    async def back_to_profile(callback: CallbackQuery):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
            user_profile = get_user_profile(callback.from_user.id)
            
            if not user_profile:
                await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            username = user_profile[0]
            user_data = await osu_api.get_user(username)
            
            if not user_data:
                await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", show_alert=True)
                return
            
            stats = user_data['statistics']
            
            play_time_hours = stats['play_time'] // 3600
            play_time_minutes = (stats['play_time'] % 3600) // 60
            
            rank_text = f"–†–∞–Ω–≥: ü•àSS: {stats['grade_counts']['ssh']} | ü•áSS: {stats['grade_counts']['ss']} | ü™ô SH: {stats['grade_counts']['sh']} | üèÜ S: {stats['grade_counts']['s']} | üß± A: {stats['grade_counts']['a']}"
            
            profile_text = load_template('profile_template.txt', {
                'username': user_data['username'],
                'pp': f"{stats['pp']:,.0f}",
                'country_rank': f"{stats['country_rank']:,}",
                'global_rank': f"{stats['global_rank']:,}",
                'accuracy': f"{stats['hit_accuracy']:.2f}",
                'play_count': f"{stats['play_count']:,}",
                'play_time_hours': play_time_hours,
                'play_time_minutes': play_time_minutes,
                'rank_text': rank_text
            })
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéµ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–µ–π", callback_data=f"recent_{user_data['id']}")]
            ])
            
            await callback.message.edit_text(profile_text, reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ—Ñ–∏–ª—é: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)

def format_time_ago(created_at):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è '–Ω–∞–∑–∞–¥'"""
    now = datetime.now(created_at.tzinfo)
    diff = now - created_at
    
    if diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "–¢–æ–ª—å–∫–æ —á—Ç–æ"